# Application Load Balancer
resource "aws_lb" "{{ resource_name }}" {
  name               = "{{ resource_name }}-{{ environment }}"
  internal           = {{ config.internal | default(false) | lower }}
  load_balancer_type = "{{ config.load_balancer_type | default('application') }}"
  security_groups    = [aws_security_group.{{ resource_name }}_lb_sg.id]
  subnets           = [
    aws_subnet.{{ resource_name }}_public_1.id,
    aws_subnet.{{ resource_name }}_public_2.id
  ]

  enable_deletion_protection = {{ config.deletion_protection | default(false) | lower }}
  enable_http2              = {{ config.enable_http2 | default(true) | lower }}
  enable_cross_zone_load_balancing = {{ config.cross_zone_lb | default(true) | lower }}

  {% if config.access_logs_enabled | default(false) %}
  access_logs {
    bucket  = aws_s3_bucket.{{ resource_name }}_lb_logs.id
    prefix  = "{{ resource_name }}-alb"
    enabled = true
  }
  {% endif %}

  tags = {
    Name        = "{{ resource_name }}-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

# VPC for Load Balancer
resource "aws_vpc" "{{ resource_name }}_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name        = "{{ resource_name }}-vpc-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "{{ resource_name }}_igw" {
  vpc_id = aws_vpc.{{ resource_name }}_vpc.id

  tags = {
    Name        = "{{ resource_name }}-igw-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

# Public subnets (in different AZs)
resource "aws_subnet" "{{ resource_name }}_public_1" {
  vpc_id            = aws_vpc.{{ resource_name }}_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = data.aws_availability_zones.available.names[0]
  map_public_ip_on_launch = true

  tags = {
    Name        = "{{ resource_name }}-public-1-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

resource "aws_subnet" "{{ resource_name }}_public_2" {
  vpc_id            = aws_vpc.{{ resource_name }}_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = data.aws_availability_zones.available.names[1]
  map_public_ip_on_launch = true

  tags = {
    Name        = "{{ resource_name }}-public-2-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

# Route table for public subnets
resource "aws_route_table" "{{ resource_name }}_public" {
  vpc_id = aws_vpc.{{ resource_name }}_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.{{ resource_name }}_igw.id
  }

  tags = {
    Name        = "{{ resource_name }}-public-rt-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

# Route table associations
resource "aws_route_table_association" "{{ resource_name }}_public_1" {
  subnet_id      = aws_subnet.{{ resource_name }}_public_1.id
  route_table_id = aws_route_table.{{ resource_name }}_public.id
}

resource "aws_route_table_association" "{{ resource_name }}_public_2" {
  subnet_id      = aws_subnet.{{ resource_name }}_public_2.id
  route_table_id = aws_route_table.{{ resource_name }}_public.id
}

# Data source for availability zones
data "aws_availability_zones" "available" {
  state = "available"
}

# Security group for ALB
resource "aws_security_group" "{{ resource_name }}_lb_sg" {
  name        = "{{ resource_name }}-lb-sg-{{ environment }}"
  description = "Security group for {{ resource_name }} ALB"
  vpc_id      = aws_vpc.{{ resource_name }}_vpc.id

  # HTTP
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow HTTP from anywhere"
  }

  {% if config.enable_https | default(true) %}
  # HTTPS
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow HTTPS from anywhere"
  }
  {% endif %}

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound"
  }

  tags = {
    Name        = "{{ resource_name }}-lb-sg-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

# Target Group
resource "aws_lb_target_group" "{{ resource_name }}_tg" {
  name     = "{{ resource_name }}-tg-{{ environment }}"
  port     = {{ config.target_port | default(80) }}
  protocol = "{{ config.target_protocol | default('HTTP') }}"
  vpc_id   = aws_vpc.{{ resource_name }}_vpc.id
  target_type = "{{ config.target_type | default('instance') }}"

  health_check {
    enabled             = true
    healthy_threshold   = {{ config.healthy_threshold | default(2) }}
    unhealthy_threshold = {{ config.unhealthy_threshold | default(2) }}
    timeout             = {{ config.health_check_timeout | default(5) }}
    interval            = {{ config.health_check_interval | default(30) }}
    path                = "{{ config.health_check_path | default('/') }}"
    protocol            = "{{ config.health_check_protocol | default('HTTP') }}"
    matcher             = "{{ config.health_check_matcher | default('200') }}"
  }

  stickiness {
    type            = "lb_cookie"
    cookie_duration = {{ config.stickiness_duration | default(86400) }}
    enabled         = {{ config.stickiness_enabled | default(false) | lower }}
  }

  tags = {
    Name        = "{{ resource_name }}-tg-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

# HTTP Listener
resource "aws_lb_listener" "{{ resource_name }}_http" {
  load_balancer_arn = aws_lb.{{ resource_name }}.arn
  port              = "80"
  protocol          = "HTTP"

  {% if config.enable_https | default(true) %}
  # Redirect HTTP to HTTPS
  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
  {% else %}
  # Forward to target group
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.{{ resource_name }}_tg.arn
  }
  {% endif %}
}

{% if config.enable_https | default(true) %}
# HTTPS Listener (requires certificate)
# NOTE: You need to provide a valid ACM certificate ARN
resource "aws_lb_listener" "{{ resource_name }}_https" {
  load_balancer_arn = aws_lb.{{ resource_name }}.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "{{ config.ssl_policy | default('ELBSecurityPolicy-TLS-1-2-2017-01') }}"
  certificate_arn   = "{{ config.certificate_arn | default('arn:aws:acm:region:account:certificate/certificate-id') }}"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.{{ resource_name }}_tg.arn
  }
}
{% endif %}

{% if config.access_logs_enabled | default(false) %}
# S3 bucket for access logs
resource "aws_s3_bucket" "{{ resource_name }}_lb_logs" {
  bucket = "{{ resource_name }}-lb-logs-{{ environment }}-${random_id.{{ resource_name }}_suffix.hex}"

  tags = {
    Name        = "{{ resource_name }}-lb-logs-{{ environment }}"
    Environment = "{{ environment }}"
    ManagedBy   = "InfraAgent"
  }
}

resource "random_id" "{{ resource_name }}_suffix" {
  byte_length = 4
}

# Bucket policy for ALB access logs
resource "aws_s3_bucket_policy" "{{ resource_name }}_lb_logs_policy" {
  bucket = aws_s3_bucket.{{ resource_name }}_lb_logs.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          AWS = "arn:aws:iam::127311923021:root"  # ELB service account for us-east-1
        }
        Action   = "s3:PutObject"
        Resource = "${aws_s3_bucket.{{ resource_name }}_lb_logs.arn}/*"
      }
    ]
  })
}
{% endif %}

# Outputs
output "{{ resource_name }}_dns_name" {
  value       = aws_lb.{{ resource_name }}.dns_name
  description = "Load balancer DNS name"
}

output "{{ resource_name }}_arn" {
  value       = aws_lb.{{ resource_name }}.arn
  description = "Load balancer ARN"
}

output "{{ resource_name }}_zone_id" {
  value       = aws_lb.{{ resource_name }}.zone_id
  description = "Load balancer zone ID"
}

output "{{ resource_name }}_target_group_arn" {
  value       = aws_lb_target_group.{{ resource_name }}_tg.arn
  description = "Target group ARN"
}

output "{{ resource_name }}_vpc_id" {
  value       = aws_vpc.{{ resource_name }}_vpc.id
  description = "VPC ID"
}
